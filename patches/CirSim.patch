--- /dev/null
+++ src/main/java/com/lushprojects/circuitjs1/client/CirSim.java
@@ -31,6 +31,7 @@
 import java.util.Map;
 import java.util.Random;
 import java.lang.Math;
+import java.util.Date;
 
 import com.google.gwt.canvas.client.Canvas;
 import com.google.gwt.user.client.ui.Button;
@@ -62,6 +63,7 @@
 import com.google.gwt.core.client.JsArray;
 import com.google.gwt.core.client.Scheduler;
 import com.google.gwt.core.client.ScriptInjector;
+import com.google.gwt.dom.client.Style.Overflow;
 import com.google.gwt.dom.client.Style.Unit;
 import com.google.gwt.http.client.Request;
 import com.google.gwt.http.client.RequestException;
@@ -74,6 +76,7 @@
 import com.google.gwt.user.client.DOM;
 import com.google.gwt.user.client.Element;
 import com.google.gwt.user.client.Event;
+import com.google.gwt.user.client.EventListener;
 import com.google.gwt.user.client.Timer;
 import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.ui.VerticalPanel;
@@ -101,6 +104,8 @@
 import com.google.gwt.event.logical.shared.ResizeEvent;
 import com.google.gwt.event.logical.shared.ResizeHandler;
 import com.google.gwt.user.client.DOM;
+import com.google.gwt.user.client.ui.ScrollPanel;
+import com.google.gwt.i18n.client.DateTimeFormat;
 
 public class CirSim implements MouseDownHandler, MouseMoveHandler, MouseUpHandler,
 ClickHandler, DoubleClickHandler, ContextMenuHandler, NativePreviewHandler,
@@ -111,10 +116,17 @@
     Button runStopButton;
     Button dumpMatrixButton;
     MenuItem aboutItem;
+    MenuItem helpItem;
+    MenuItem licenseItem;
+    // MenuItem testItem;
+    MenuItem aboutCircuitsItem;
+    MenuItem aboutCircuitsPLItem;
+    MenuItem closeItem;
+    //CheckboxMenuItem fullscreenCheckItem;
     MenuItem importFromLocalFileItem, importFromTextItem, exportAsUrlItem, exportAsLocalFileItem, exportAsTextItem,
             printItem, recoverItem, saveFileItem;
-    MenuItem importFromDropboxItem;
-    MenuItem undoItem, redoItem, cutItem, copyItem, pasteItem, selectAllItem, optionsItem;
+    //MenuItem importFromDropboxItem;
+    MenuItem undoItem, redoItem, cutItem, copyItem, pasteItem, selectAllItem, optionsItem, modItem;
     MenuBar optionsMenuBar;
     CheckboxMenuItem dotsCheckItem;
     CheckboxMenuItem voltsCheckItem;
@@ -249,6 +261,9 @@
     boolean hideInfoBox;
     int scopeColCount[];
     static EditDialog editDialog, customLogicEditDialog, diodeModelEditDialog;
+    static HelpDialog helpDialog;
+    static LicenseDialog licenseDialog;
+	static ModDialog modDialog;
     static ScrollValuePopup scrollValuePopup;
     static Dialog dialogShowing;
     static AboutBox aboutBox;
@@ -259,12 +274,17 @@
     Rectangle circuitArea;
     Vector<UndoItem> undoStack, redoStack;
     double transform[];
-    boolean unsavedChanges;
+    static boolean unsavedChanges;
+    static String filePath;
+    static String fileName;
+    static String lastFileName;
 
     DockLayoutPanel layoutPanel;
     MenuBar menuBar;
     MenuBar fileMenuBar;
     VerticalPanel verticalPanel;
+    VerticalPanel verticalPanel2;
+    ScrollPanel slidersPanel;
     CellPanel buttonPanel;
     private boolean mouseDragging;
     double scopeHeightFraction = 0.2;
@@ -273,7 +293,10 @@
     Vector<String> mainMenuItemNames = new Vector<String>();
 
     LoadFile loadFileInput;
-    Frame iFrame;
+    Frame iFrame=null;
+
+	static Button absResetBtn;
+	static Button absRunStopBtn;
 
     Canvas cv;
     Context2d cvcontext;
@@ -281,7 +304,7 @@
     // canvas width/height in px (before device pixel ratio scaling)
     int canvasWidth, canvasHeight;
 
-    static final int MENUBARHEIGHT = 30;
+    static int MENUBARHEIGHT = 30;
     static int VERTICALPANELWIDTH = 166; // default
     static final int POSTGRABSQ = 25;
     static final int MINPOSTGRABSIZE = 256;
@@ -303,6 +326,14 @@
         return window.devicePixelRatio;
     }-*/;
 
+	void redrawCanvasSize() {
+		layoutPanel.setWidgetSize(menuBar, MENUBARHEIGHT);
+		if (MENUBARHEIGHT<30) menuBar.addStyleName("modSmallMenuBar");
+		else menuBar.removeStyleName("modSmallMenuBar");
+		setCanvasSize();
+		repaint();
+	}
+
     void checkCanvasSize() {
         if (cv.getCoordinateSpaceWidth() != (int) (canvasWidth * devicePixelRatio()))
             setCanvasSize();
@@ -316,14 +347,16 @@
     }-*/;
     
     public void setCanvasSize(){
+
+    	Storage lstor = Storage.getLocalStorageIfSupported();
+
     	int width, height;
     	width=(int)RootLayoutPanel.get().getOffsetWidth();
     	height=(int)RootLayoutPanel.get().getOffsetHeight();
     	height=height-(hideMenu?0:MENUBARHEIGHT);
 
-    	//not needed on mobile since the width of the canvas' container div is set to 100% in ths CSS file
-    	if (!isMobile(sidePanelCheckboxLabel))
-    	    width=width-VERTICALPANELWIDTH;
+    	if (isSidePanelCheckboxChecked() && lstor.getItem("MOD_overlayingSidebar")=="false")
+			width=width-VERTICALPANELWIDTH;
 
     	width = Math.max(width, 0);   // avoid exception when setting negative width
     	height = Math.max(height, 0);
@@ -360,6 +393,127 @@
         return $wnd.LZString.decompressFromEncodedURIComponent(dump);
     }-*/;
 
+	public static void executeJS(String js){
+		ScriptInjector.fromString(js)
+			.setWindow(ScriptInjector.TOP_WINDOW)
+			.inject();
+	}
+
+	// this code is taken from original ExportAsLocalFileDialog.java:
+
+	public static void setLastFileName(String s) {
+	    // remember filename for use when saving a new file.
+	    // if s is null or automatically generated then just clear out old filename.
+	    if (s == null || (s.startsWith("circuit-") && s.contains(".circuitjs")))
+		lastFileName = null;
+	    else
+		lastFileName = s;
+	}
+
+	public String getLastFileName() {
+		Date date = new Date();
+		String fname;
+		if (lastFileName != null)
+		    fname = lastFileName;
+		else {
+		    DateTimeFormat dtf = DateTimeFormat.getFormat("yyyyMMdd-HHmm");
+		    fname = "circuit-" + dtf.format(date) + ".circuitjs.txt";
+		}
+		return fname;
+	}
+
+	static native float getDefaultScale() /*-{
+		$wnd.nw.Screen.Init();
+		var dwidth = $wnd.nw.Screen.screens[0].bounds.width;
+		var defaultScale;
+		if (dwidth >= 1960)
+			defaultScale = 1.6; // 2-0.4 and etc.
+		else if (dwidth >= 1752 && dwidth < 1960)
+			defaultScale = 1.1; // -0.4
+		else if (dwidth >= 1600 && dwidth < 1752)
+			defaultScale = 0.7; // -0.3
+		else if (dwidth >= 1460 && dwidth < 1600)
+			defaultScale = 0.3; // -0.2
+		else if (dwidth >= 1200 && dwidth < 1460)
+			defaultScale = -0.1; // -0.1
+		else if (dwidth < 1200)
+			defaultScale = -0.3;
+		return defaultScale;
+	}-*/;
+
+	public static native void setSidebarAnimation(String duration,String speedcurve) /*-{
+		var triggerLabel = $doc.querySelector(".triggerLabel");
+		var sidebar = $doc.querySelector(".trigger+.triggerLabel+div");
+		// property name | duration | timing function | delay
+		var split = " "+duration+"ms "+speedcurve;
+		triggerLabel.style.transition = (duration=="none") ? duration : "right"+split;
+		sidebar.style.transition = (duration=="none") ? duration : "width"+split;
+	}-*/;
+
+	void modSetDefault(){
+		
+		Storage lstor = Storage.getLocalStorageIfSupported();
+		// KEYS:
+		String MOD_UIScale=lstor.getItem("MOD_UIScale");
+		String MOD_TopMenuBar=lstor.getItem("MOD_TopMenuBar");
+		String MOD_absBtnTheme=lstor.getItem("MOD_absBtnTheme");
+		String MOD_absBtnIcon=lstor.getItem("MOD_absBtnIcon");
+		String MOD_hideAbsBtns=lstor.getItem("MOD_hideAbsBtns");
+		String MOD_overlayingSidebar=lstor.getItem("MOD_overlayingSidebar");
+		String MOD_showSidebaronStartup=lstor.getItem("MOD_showSidebaronStartup");
+		String MOD_overlayingSBAnimation=lstor.getItem("MOD_overlayingSBAnimation");
+		String MOD_SBAnim_duration=lstor.getItem("MOD_SBAnim_duration");
+		String MOD_SBAnim_SpeedCurve=lstor.getItem("MOD_SBAnim_SpeedCurve");
+		String MOD_setPauseWhenWinUnfocused=lstor.getItem("MOD_setPauseWhenWinUnfocused");
+
+		if (MOD_UIScale==null){
+			lstor.setItem("MOD_UIScale", Float.toString(getDefaultScale()));
+			executeJS("nw.Window.get().zoomLevel = "+getDefaultScale());
+		}
+		else executeJS("nw.Window.get().zoomLevel = "+MOD_UIScale);
+		if (MOD_TopMenuBar==null) lstor.setItem("MOD_TopMenuBar","standart");
+		else if (MOD_TopMenuBar=="small"){
+			MENUBARHEIGHT = 20;
+			redrawCanvasSize();
+			absRunStopBtn.removeStyleName("btn-top-pos");
+			absResetBtn.removeStyleName("btn-top-pos");
+			absRunStopBtn.addStyleName("btn-min-top-pos");
+			absResetBtn.addStyleName("btn-min-top-pos");
+			executeJS("setTrLabelPos(\"39px\")");
+		}
+		if (MOD_absBtnTheme==null) lstor.setItem("MOD_absBtnTheme","default");
+		else if (MOD_absBtnTheme=="classic"){
+			absRunStopBtn.removeStyleName("modDefaultRunStopBtn");
+			absRunStopBtn.addStyleName("gwt-Button");
+			absRunStopBtn.addStyleName("modClassicButton");
+			absResetBtn.removeStyleName("modDefaultResetBtn");
+			absResetBtn.addStyleName("gwt-Button");
+			absResetBtn.addStyleName("modClassicButton");
+		}
+		if (MOD_absBtnIcon==null) lstor.setItem("MOD_absBtnIcon","stop");
+		else if (MOD_absBtnIcon=="pause"){
+			absRunStopBtn.getElement().setInnerHTML("&#xE802;");
+		}
+		if (MOD_hideAbsBtns==null) lstor.setItem("MOD_hideAbsBtns","false");
+		else if (MOD_hideAbsBtns=="true"){
+			absRunStopBtn.setVisible(false);
+			absResetBtn.setVisible(false);
+		}
+		if (MOD_overlayingSidebar==null) lstor.setItem("MOD_overlayingSidebar","false");
+		if (MOD_showSidebaronStartup==null) lstor.setItem("MOD_showSidebaronStartup","false");
+		else if (MOD_showSidebaronStartup=="true") executeJS("document.getElementById(\"trigger\").checked = true");
+		if (MOD_SBAnim_duration==null || MOD_SBAnim_SpeedCurve==null){
+			lstor.setItem("MOD_SBAnim_duration","500");
+			lstor.setItem("MOD_SBAnim_SpeedCurve","ease");
+			//if (lstor.getItem("MOD_overlayingSBAnimation")) setSidebarAnimation("500","ease");
+		}
+		if (MOD_overlayingSBAnimation==null) lstor.setItem("MOD_overlayingSBAnimation","false");
+		if (MOD_overlayingSidebar=="true" && MOD_overlayingSBAnimation=="true"){
+			setSidebarAnimation(lstor.getItem("MOD_SBAnim_duration"),lstor.getItem("MOD_SBAnim_SpeedCurve"));
+		} else setSidebarAnimation("none","");
+		if (MOD_setPauseWhenWinUnfocused==null) lstor.setItem("MOD_setPauseWhenWinUnfocused","true");
+	}
+
 //    Circuit applet;
 
     CirSim() {
@@ -457,13 +611,31 @@
 
 	shortcuts = new String[127];
 
+	RootLayoutPanel.get().add(absResetBtn = new Button("&#8634;",
+		new ClickHandler() {
+			public void onClick(ClickEvent event) {
+				resetAction();
+			}
+		}));
+
+	RootLayoutPanel.get().add(absRunStopBtn = new Button("&#xE800;",
+		new ClickHandler() {
+			public void onClick(ClickEvent event) {
+				setSimRunning(!simIsRunning());
+				executeJS("SetBtnsStyle()");
+			}
+		}));
+
+	absResetBtn.setStyleName("btn-top-pos reset-btn reset-btn-pos modDefaultResetBtn");
+	absRunStopBtn.setStyleName("btn-top-pos run-stop-btn run-stop-btn-pos modDefaultRunStopBtn");
+	absResetBtn.getElement().setTitle("Reset");
+	absRunStopBtn.getElement().setTitle("Run/Stop");
+
 	layoutPanel = new DockLayoutPanel(Unit.PX);
 
 	fileMenuBar = new MenuBar(true);
-	if (isElectron())
-	    fileMenuBar.addItem(menuItemWithShortcut("window", "New Window...", Locale.LS(ctrlMetaKey + "N"),
-		    new MyCommand("file", "newwindow")));
-	
+	fileMenuBar.addItem(menuItemWithShortcut("window", "New Window...", Locale.LS(ctrlMetaKey + "N"),
+		new MyCommand("file", "newwindow")));
 	fileMenuBar.addItem(iconMenuItem("doc-new", "New Blank Circuit", new MyCommand("file", "newblankcircuit")));
 	importFromLocalFileItem = menuItemWithShortcut("folder", "Open File...", Locale.LS(ctrlMetaKey + "O"),
 		new MyCommand("file","importfromlocalfile"));
@@ -471,18 +643,18 @@
 	fileMenuBar.addItem(importFromLocalFileItem);
 	importFromTextItem = iconMenuItem("doc-text", "Import From Text...", new MyCommand("file","importfromtext"));
 	fileMenuBar.addItem(importFromTextItem);
-	importFromDropboxItem = iconMenuItem("dropbox", "Import From Dropbox...", new MyCommand("file", "importfromdropbox"));
-	fileMenuBar.addItem(importFromDropboxItem);
-	if (isElectron()) {
+	//importFromDropboxItem = iconMenuItem("dropbox", "Import From Dropbox...", new MyCommand("file", "importfromdropbox"));
+	//fileMenuBar.addItem(importFromDropboxItem);
+	//if (isElectron()) {
 	    saveFileItem = fileMenuBar.addItem(menuItemWithShortcut("floppy", "Save", Locale.LS(ctrlMetaKey + "S"),
 		    new MyCommand("file", "save")));
 	    fileMenuBar.addItem(iconMenuItem("floppy", "Save As...", new MyCommand("file", "saveas")));
-	} else {
+	/*} else {
 	    exportAsLocalFileItem = menuItemWithShortcut("floppy", "Save As...", Locale.LS(ctrlMetaKey + "S"),
 		    new MyCommand("file","exportaslocalfile"));
 	    exportAsLocalFileItem.setEnabled(ExportAsLocalFileDialog.downloadIsSupported());
 	    fileMenuBar.addItem(exportAsLocalFileItem);
-	}
+	}*/
 	exportAsUrlItem = iconMenuItem("export", "Export As Link...", new MyCommand("file","exportasurl"));
 	fileMenuBar.addItem(exportAsUrlItem);
 	exportAsTextItem = iconMenuItem("export", "Export As Text...", new MyCommand("file","exportastext"));
@@ -500,20 +672,27 @@
 	fileMenuBar.addSeparator();
 	fileMenuBar.addItem(iconMenuItem("resize-full-alt", "Toggle Full Screen", new MyCommand("view", "fullscreen")));
 	fileMenuBar.addSeparator();
+	fileMenuBar.addItem(iconMenuItem("exit", "Exit",
+		new Command() { public void execute(){
+			executeJS("nw.Window.get().close(true)");
+		}}));
+	/* 
 	aboutItem = iconMenuItem("info-circled", "About...", (Command)null);
 	fileMenuBar.addItem(aboutItem);
 	aboutItem.setScheduledCommand(new MyCommand("file","about"));
-
+	*/
 	int width=(int)RootLayoutPanel.get().getOffsetWidth();
-	VERTICALPANELWIDTH = width/5;
+	VERTICALPANELWIDTH = 166; /* = width/5;
 	if (VERTICALPANELWIDTH > 166)
 	    VERTICALPANELWIDTH = 166;
 	if (VERTICALPANELWIDTH < 128)
-	    VERTICALPANELWIDTH = 128;
+	    VERTICALPANELWIDTH = 128;*/
 
 	menuBar = new MenuBar();
 	menuBar.addItem(Locale.LS("File"), fileMenuBar);
 	verticalPanel=new VerticalPanel();
+	slidersPanel = new ScrollPanel();
+	verticalPanel2=new VerticalPanel();
 
 	verticalPanel.getElement().addClassName("verticalPanel");
 	verticalPanel.getElement().setId("painel");
@@ -523,6 +702,21 @@
 	sidePanelCheckbox.setId("trigger");
 	sidePanelCheckboxLabel.setAttribute("for", "trigger" );
 	sidePanelCheckbox.addClassName("trigger");
+	Event.sinkEvents(sidePanelCheckbox, Event.ONCLICK);
+	Event.setEventListener(sidePanelCheckbox, new EventListener() {
+		public void onBrowserEvent(Event event) {
+			if(Event.ONCLICK == event.getTypeInt()) {
+				Storage lstor = Storage.getLocalStorageIfSupported();
+				setupScopes();
+				executeJS("SetBtnsStyle();");
+				setCanvasSize();
+				if (lstor.getItem("MOD_overlayingSidebar")=="false") {
+					if (isSidePanelCheckboxChecked()) transform[4] -= VERTICALPANELWIDTH/2;
+					else transform[4] += VERTICALPANELWIDTH/2;
+				}
+			}
+		}
+	});
 	Element topPanelCheckbox = DOM.createInputCheck(); 
 	Element topPanelCheckboxLabel = DOM.createLabel();
 	topPanelCheckbox.setId("toptrigger");
@@ -565,9 +759,9 @@
 	m.addItem(combineAllItem = iconMenuItem("object-group", "Combine All", new MyCommand("scopes", "combineAll")));
 	m.addItem(separateAllItem = iconMenuItem("object-ungroup", "Separate All", new MyCommand("scopes", "separateAll")));
 	menuBar.addItem(Locale.LS("Scopes"), m);
-
 	optionsMenuBar = m = new MenuBar(true );
 	menuBar.addItem(Locale.LS("Options"), optionsMenuBar);
+
 	m.addItem(dotsCheckItem = new CheckboxMenuItem(Locale.LS("Show Current")));
 	dotsCheckItem.setState(true);
 	m.addItem(voltsCheckItem = new CheckboxMenuItem(Locale.LS("Show Voltage"),
@@ -646,6 +840,8 @@
 
 	m.addItem(new CheckboxAlignedMenuItem(Locale.LS("Shortcuts..."), new MyCommand("options", "shortcuts")));
 	m.addItem(optionsItem = new CheckboxAlignedMenuItem(Locale.LS("Other Options..."), new MyCommand("options","other")));
+	m.addItem(modItem = new CheckboxAlignedMenuItem("Modification Setup...", new MyCommand("options","modsetup")));
+	modItem.addStyleName("modItem");
 	if (isElectron())
 	    m.addItem(new CheckboxAlignedMenuItem(Locale.LS("Toggle Dev Tools"), new MyCommand("options","devtools")));
 
@@ -677,9 +873,12 @@
 	    return;
 	}
 
+	modSetDefault();
+
 	Window.addResizeHandler(new ResizeHandler() {
 	    public void onResize(ResizeEvent event) {
 		repaint();
+		setSlidersPanelHeight();
 	    }
 	});
 
@@ -687,6 +886,7 @@
 	setCanvasSize();
 	layoutPanel.add(cv);
 	verticalPanel.add(buttonPanel);
+	buttonPanel.addStyleName("sidePanelElm");
 	buttonPanel.add(resetButton = new Button(Locale.LS("Reset")));
 	resetButton.addClickHandler(new ClickHandler() {
 	    public void onClick(ClickEvent event) {
@@ -710,40 +910,63 @@
 */
 	
 
-	if (LoadFile.isSupported())
+	if (LoadFile.isSupported()){
 	    verticalPanel.add(loadFileInput = new LoadFile(this));
+		loadFileInput.addStyleName("sidePanelElm");
+		setSlidersPanelHeight();
+	}
 
 	Label l;
 	verticalPanel.add(l = new Label(Locale.LS("Simulation Speed")));
 	l.addStyleName("topSpace");
+	l.addStyleName("sidePanelElm");
 
 	// was max of 140
 	verticalPanel.add( speedBar = new Scrollbar(Scrollbar.HORIZONTAL, 3, 1, 0, 260));
+	speedBar.addStyleName("sidePanelElm");
 
 	verticalPanel.add( l = new Label(Locale.LS("Current Speed")));
 	l.addStyleName("topSpace");
+	l.addStyleName("sidePanelElm");
+
 	currentBar = new Scrollbar(Scrollbar.HORIZONTAL, 50, 1, 1, 100);
 	verticalPanel.add(currentBar);
+	currentBar.addStyleName("sidePanelElm");
+
 	verticalPanel.add(powerLabel = new Label (Locale.LS("Power Brightness")));
 	powerLabel.addStyleName("topSpace");
+	powerLabel.addStyleName("sidePanelElm");
+
 	verticalPanel.add(powerBar = new Scrollbar(Scrollbar.HORIZONTAL,
 		50, 1, 1, 100));
+	powerBar.addStyleName("sidePanelElm");
 	setPowerBarEnable();
 
 	//	verticalPanel.add(new Label(""));
 	//        Font f = new Font("SansSerif", 0, 10);
 	l = new Label(Locale.LS("Current Circuit:"));
 	l.addStyleName("topSpace");
+	l.addStyleName("sidePanelElm");
 	//        l.setFont(f);
 	titleLabel = new Label("Label");
+	titleLabel.addStyleName("sidePanelElm");
 	//        titleLabel.setFont(f);
 	verticalPanel.add(l);
 	verticalPanel.add(titleLabel);
 
-	verticalPanel.add(iFrame = new Frame("iframe.html"));
-	iFrame.setWidth(VERTICALPANELWIDTH+"px");
-	iFrame.setHeight("100 px");
-	iFrame.getElement().setAttribute("scrolling", "no");
+	Label sab;
+	sab = new Label(Locale.LS("Sliders and buttons")+":");
+	sab.addStyleName("sabLabel");
+	verticalPanel.add(sab);
+
+	verticalPanel.add(slidersPanel);
+	slidersPanel.add(verticalPanel2);
+	verticalPanel2.addStyleName("sidePanelvp2");
+	verticalPanel2.setWidth("150px");
+
+	//slidersPanel.setAlwaysShowScrollBars(true);
+	slidersPanel.getElement().getStyle().setOverflowX(Overflow.HIDDEN);
+	slidersPanel.getElement().getStyle().setOverflowY(Overflow.SCROLL);
 
 	setGrid();
 	elmList = new Vector<CircuitElm>();
@@ -809,12 +1032,13 @@
 	    getSetupList(false);
 	    readCircuit(startCircuitText);
 	    unsavedChanges = false;
+	    changeWindowTitle(unsavedChanges);
 	} else {
 	    if (stopMessage == null && startCircuitLink!=null) {
 		readCircuit("");
 		getSetupList(false);
-		ImportFromDropboxDialog.setSim(this);
-		ImportFromDropboxDialog.doImportDropboxLink(startCircuitLink, false);
+		//ImportFromDropboxDialog.setSim(this);
+		//ImportFromDropboxDialog.doImportDropboxLink(startCircuitLink, false);
 	    } else {
 		readCircuit("");
 		if (stopMessage == null && startCircuit != null) {
@@ -831,7 +1055,7 @@
 
 	enableUndoRedo();
 	enablePaste();
-	setiFrameHeight();
+	setSlidersPanelHeight();
 	cv.addMouseDownHandler(this);
 	cv.addMouseMoveHandler(this);
 	cv.addMouseOutHandler(this);
@@ -1291,22 +1515,20 @@
 	    sb.addItem(mi);
     }
     
-    public void setiFrameHeight() {
-    	if (iFrame==null)
-    		return;
+    public void setSlidersPanelHeight() {
     	int i;
     	int cumheight=0;
-    	for (i=0; i < verticalPanel.getWidgetIndex(iFrame); i++) {
+    	for (i=0; i < verticalPanel.getWidgetIndex(slidersPanel); i++) {
     		if (verticalPanel.getWidget(i) !=loadFileInput) {
     			cumheight=cumheight+verticalPanel.getWidget(i).getOffsetHeight();
     			if (verticalPanel.getWidget(i).getStyleName().contains("topSpace"))
     					cumheight+=12;
     		}
     	}
-    	int ih=RootLayoutPanel.get().getOffsetHeight()-(hideMenu?0:MENUBARHEIGHT)-cumheight;
+    	int ih=RootLayoutPanel.get().getOffsetHeight()-MENUBARHEIGHT-cumheight;
     	if (ih<0)
     		ih=0;
-    	iFrame.setHeight(ih+"px");
+	   	slidersPanel.setHeight(ih+"px");
     }
     
 
@@ -1787,9 +2009,13 @@
 	return getNthScopeElm(scopeMenuSelected-scopeCount).elmScope == s; 
     }
     
+	native boolean isSidePanelCheckboxChecked() /*-{
+		return $doc.getElementById("trigger").checked;
+    }-*/;
+
     void setupScopes() {
     	int i;
-
+    	Storage lstor = Storage.getLocalStorageIfSupported();
     	// check scopes to make sure the elements still exist, and remove
     	// unused scopes/columns
     	int pos = -1;
@@ -1820,7 +2046,9 @@
     	int iw = infoWidth;
     	if (colct <= 2)
     		iw = iw*3/2;
-    	int w = (canvasWidth-iw) / colct;
+    	int w = (canvasWidth-iw) / colct; // Оно!
+    	if (isSidePanelCheckboxChecked() && lstor.getItem("MOD_overlayingSidebar")=="true")
+    		w = (canvasWidth-iw-VERTICALPANELWIDTH) / colct;
     	int marg = 10;
     	if (w < marg*2)
     		w = marg*2;
@@ -1850,6 +2078,7 @@
     	    setCircuitArea();
     	    oldScopeCount = scopeCount;
     	}
+		repaint();
     }
     
     String getHint() {
@@ -3176,6 +3405,49 @@
 		scopes[i].resetGraph(true);
     	repaint();
     }
+
+	static native void changeWindowTitle(boolean isCircuitChanged)/*-{
+		var newTitle = "CircuitJS1 Desktop Mod";
+		var filename = @com.lushprojects.circuitjs1.client.CirSim::fileName;
+		var changed = (isCircuitChanged) ? "*" : "";
+		if (filename!=null) $doc.title = changed+filename+" - "+newTitle;
+		else $doc.title = $wnd.nw.App.manifest.window.title;
+	}-*/;
+
+	static native void nodeSave(String path, String dump) /*-{
+		var fs = $wnd.nw.require('fs');
+		fs.writeFile(path, dump, function(err) {
+			if(err) {
+						return console.log(err);
+					}
+			console.log("The file was saved!");
+			});
+    }-*/;
+
+	static native void nodeSaveAs(String dump, String fileName) /*-{
+		var saveasInput = $doc.createElement("input");
+		saveasInput.setAttribute('type', 'file');
+		saveasInput.setAttribute('nwsaveas', fileName);
+		saveasInput.style = "display:none";
+		$doc.body.appendChild(saveasInput);
+		saveasInput.click();
+		saveasInput.addEventListener('cancel', function(){
+		// oncancel don't work. The element will not be deleted but we can still work with this
+		// https://github.com/nwjs/nw.js/issues/7658
+			saveasInput.remove()
+		});
+		saveasInput.addEventListener('change', function(){
+			@com.lushprojects.circuitjs1.client.CirSim::filePath = saveasInput.value;
+			@com.lushprojects.circuitjs1.client.CirSim::fileName = saveasInput.files[0].name;
+			@com.lushprojects.circuitjs1.client.CirSim::lastFileName = saveasInput.files[0].name;
+			@com.lushprojects.circuitjs1.client.CirSim::nodeSave(Ljava/lang/String;Ljava/lang/String;)(saveasInput.value, dump);
+			console.log(saveasInput.value);
+			console.log(saveasInput.files[0].name);
+			if (saveasInput.value!=null) $wnd.CircuitJS1.allowSave(true);
+			saveasInput.remove();
+			@com.lushprojects.circuitjs1.client.CirSim::changeWindowTitle(Z)(false);
+		});
+    }-*/;
     
     static void electronSaveAsCallback(String s) {
 	s = s.substring(s.lastIndexOf('/')+1);
@@ -3238,36 +3510,49 @@
 	    Window.alert(Locale.LS("Editing disabled.  Re-enable from the Options menu."));
 	    return;
 	}
+    	if (item=="help")
+    	helpDialog = new HelpDialog();
+    	if (item=="license")
+    	    licenseDialog = new LicenseDialog();
     	if (item=="about")
     		aboutBox = new AboutBox(circuitjs1.versionString);
+    	if (item=="modsetup")
+    	    modDialog = new ModDialog();
     	if (item=="importfromlocalfile") {
     		pushUndo();
-    		if (isElectron())
-    		    electronOpenFile();
-    		else
-    		    loadFileInput.click();
+    		loadFileInput.click();
     	}
     	if (item=="newwindow") {
-    	    Window.open(Document.get().getURL(), "_blank", "");
-    	}
-    	if (item=="save")
-    	    electronSave(dumpCircuit());
-    	if (item=="saveas")
-    	    electronSaveAs(dumpCircuit());
+    	    //Window.open(Document.get().getURL(), "_blank", "");
+    	    //Maybe this can help with lags:
+    	    executeJS("nw.Window.open('circuitjs.html', {new_instance: true, mixed_context: false});");
+    	}
+    	if (item=="save"){
+			nodeSave(filePath,dumpCircuit());
+			unsavedChanges = false;
+			changeWindowTitle(unsavedChanges);
+		}
+    	    
+    	if (item=="saveas"){
+			nodeSaveAs(dumpCircuit(), getLastFileName());
+			unsavedChanges = false;
+			changeWindowTitle(unsavedChanges);
+		}
+
     	if (item=="importfromtext") {
     		dialogShowing = new ImportFromTextDialog(this);
     	}
-    	if (item=="importfromdropbox") {
+    	/*if (item=="importfromdropbox") {
     		dialogShowing = new ImportFromDropboxDialog(this);
-    	}
+    	}*/
     	if (item=="exportasurl") {
     		doExportAsUrl();
     		unsavedChanges = false;
     	}
-    	if (item=="exportaslocalfile") {
+    	/*if (item=="exportaslocalfile") {
     		doExportAsLocalFile();
     		unsavedChanges = false;
-    	}
+    	}*/
     	if (item=="exportastext") {
     		doExportAsText();
     		unsavedChanges = false;
@@ -3517,11 +3802,15 @@
     		tempMouseMode = mouseMode;
     	}
     	if (item=="fullscreen") {
-    	    if (! Graphics.isFullScreen)
+    	    if (! Graphics.isFullScreen){
     		Graphics.viewFullScreen();
-    	    else
+			setSlidersPanelHeight();
+			}
+    	    else{
     		Graphics.exitFullScreen();
     	    centreCircuit();
+			setSlidersPanelHeight();
+			}
     	}
     
 	repaint();
@@ -3585,6 +3874,8 @@
     	scopes[s].position = scopes[s-1].position;
     	for (s++; s < scopeCount; s++)
     		scopes[s].position--;
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
 
     void unstackScope(int s) {
@@ -3597,6 +3888,8 @@
     	    s++;
     	for (; s < scopeCount; s++)
     		scopes[s].position++;
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
 
     void combineScope(int s) {
@@ -3607,6 +3900,8 @@
     	}
     	scopes[s-1].combine(scopes[s]);
     	scopes[s].setElm(null);
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
     
 
@@ -3616,6 +3911,8 @@
     		scopes[i].position = 0;
     		scopes[i].showMax = scopes[i].showMin = false;
     	}
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
 
     void unstackAll() {
@@ -3624,6 +3921,8 @@
     		scopes[i].position = i;
     		scopes[i].showMax = true;
     	}
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
 
     void combineAll() {
@@ -3632,6 +3931,8 @@
     	    scopes[i].combine(scopes[i+1]);
     	    scopes[i+1].setElm(null);
     	}
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
     
     void separateAll() {
@@ -3642,6 +3943,8 @@
     	    ct = scopes[i].separate(newscopes, ct);
 	scopes = newscopes;
 	scopeCount = ct;
+	unsavedChanges = true;
+	changeWindowTitle(unsavedChanges);
     }
 
     void doEdit(Editable eable) {
@@ -3706,18 +4009,21 @@
     	dialogShowing = dlg;
     	dialogShowing.show();
     }
-    
+    /*
     void doExportAsLocalFile() {
     	String dump = dumpCircuit();
     	dialogShowing = new ExportAsLocalFileDialog(dump);
     	dialogShowing.show();
     }
-
+*/
     public void importCircuitFromText(String circuitText, boolean subcircuitsOnly) {
 		int flags = subcircuitsOnly ? (CirSim.RC_SUBCIRCUITS | CirSim.RC_RETAIN) : 0;
 		if (circuitText != null) {
 			readCircuit(circuitText, flags);
 			allowSave(false);
+			filePath = null;
+			fileName = null;
+			changeWindowTitle(false);
 		}
     }
 
@@ -3805,6 +4111,33 @@
     	currentMenuBar=new MenuBar(true);
     	currentMenuBar.setAutoOpen(true);
     	menuBar.addItem(Locale.LS("Circuits"), currentMenuBar);
+		
+		MenuBar h = new MenuBar(true);
+		helpItem=iconMenuItem("book-open", "User Guide", (Command)null);
+		h.addItem(helpItem);
+		helpItem.setScheduledCommand(new MyCommand("file","help"));
+		licenseItem=iconMenuItem("license", "License",(Command)null);
+		h.addItem(licenseItem);
+		licenseItem.setScheduledCommand(new MyCommand("file","license"));
+		aboutItem = iconMenuItem("info-circled", "About...", (Command)null);
+		h.addItem(aboutItem);
+		aboutItem.setScheduledCommand(new MyCommand("file","about"));
+		h.addSeparator();
+		h.addItem(aboutCircuitsItem = iconMenuItem("link", "About Circuits",
+		new Command() {
+			public void execute(){
+				executeJS("nw.Shell.openExternal('https://www.falstad.com/circuit/e-index.html')");
+			}
+		}));
+		h.addItem(aboutCircuitsPLItem = iconMenuItem("link", "About Circuits (Polish ver.)",
+		new Command() {
+			public void execute(){
+				executeJS("nw.Shell.openExternal('https://www.falstad.com/circuit/polish/e-index.html');");
+			}
+		}));
+
+		menuBar.addItem(Locale.LS("Help"), h);
+		
     	stack[stackptr++] = currentMenuBar;
     	int p;
     	for (p = 0; p < len; ) {
@@ -3838,6 +4171,7 @@
     				if (file.equals(startCircuit) && startLabel == null) {
     				    startLabel = title;
     				    titleLabel.setText(title);
+    				    setSlidersPanelHeight();
     				}
     				if (first && startCircuit == null) {
     					startCircuit = file;
@@ -3855,16 +4189,19 @@
 	readCircuit(text.getBytes(), flags);
 	if ((flags & RC_KEEP_TITLE) == 0)
 	    titleLabel.setText(null);
+	    setSlidersPanelHeight();
     }
 
     void readCircuit(String text) {
 	readCircuit(text.getBytes(), 0);
 	titleLabel.setText(null);
+	setSlidersPanelHeight();
     }
 
     void setCircuitTitle(String s) {
 	if (s != null)
 	    titleLabel.setText(s);
+	    setSlidersPanelHeight();
     }
     
 	void readSetupFile(String str, String title) {
@@ -3874,7 +4211,11 @@
 		loadFileFromURL(url);
 		if (title != null)
 		    titleLabel.setText(title);
+		    setSlidersPanelHeight();
 		unsavedChanges = false;
+		filePath = null;
+		fileName = null;
+		changeWindowTitle(unsavedChanges);
 	}
 	
 	void loadFileFromURL(String url) {
@@ -3893,6 +4234,9 @@
 			    readCircuit(text, RC_KEEP_TITLE);
 			    allowSave(false);
 			    unsavedChanges = false;
+				filePath = null;
+				fileName = null;
+				changeWindowTitle(unsavedChanges);
 			}
 			else { 
 			    Window.alert(Locale.LS("Can't load circuit!"));
@@ -4125,6 +4469,8 @@
 		    heldSwitchElm = se;
 		if (!(se instanceof LogicInputElm))
 		    needAnalyze();
+		unsavedChanges = true;
+		changeWindowTitle(unsavedChanges);
 		return true;
 	}
 
@@ -4206,8 +4552,12 @@
     		dragGridY = snapGrid(dragGridY);
     	    }
    	}
-    	if (changed)
+    	if (changed){
     	    writeRecoveryToStorage();
+    	    unsavedChanges = true;
+    	    changeWindowTitle(unsavedChanges);
+		}
+
     	repaint();
     }
     
@@ -4906,13 +5256,14 @@
     			dragElm.draggingDone();
     			circuitChanged = true;
     			writeRecoveryToStorage();
-    			unsavedChanges = true;
     		}
     		dragElm = null;
     	}
     	if (circuitChanged) {
     	    needAnalyze();
     	    pushUndo();
+    	    unsavedChanges = true;
+    	    changeWindowTitle(unsavedChanges);
     	}
     	if (dragElm != null)
     		dragElm.delete();
@@ -4984,6 +5335,8 @@
     	if (mouseElm!=null && !dialogIsShowing() && scopeSelected == -1)
     		if (mouseElm instanceof ResistorElm || mouseElm instanceof CapacitorElm ||  mouseElm instanceof InductorElm) {
     			scrollValuePopup = new ScrollValuePopup(x, y, deltay, mouseElm, this);
+    			unsavedChanges = true;
+    			changeWindowTitle(unsavedChanges);
     		}
     }
     
@@ -5014,6 +5367,8 @@
     	UndoItem ui = undoStack.remove(undoStack.size()-1);
     	loadUndoItem(ui);
     	enableUndoRedo();
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
 
     void doRedo() {
@@ -5023,6 +5378,8 @@
     	UndoItem ui = redoStack.remove(redoStack.size()-1);
     	loadUndoItem(ui);
     	enableUndoRedo();
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
 
     void loadUndoItem(UndoItem ui) {
@@ -5037,6 +5394,9 @@
 	readCircuit(recovery);
 	allowSave(false);
 	recoverItem.setEnabled(false);
+	filePath = null;
+	fileName = null;
+	changeWindowTitle(unsavedChanges);
     }
     
     void enableUndoRedo() {
@@ -5157,6 +5517,8 @@
     	    deleteUnusedScopeElms();
     	    needAnalyze();
     	    writeRecoveryToStorage();
+    	    unsavedChanges = true;
+    	    changeWindowTitle(unsavedChanges);
     	}    
     }
     
@@ -5307,6 +5669,8 @@
     	}
     	needAnalyze();
     	writeRecoveryToStorage();
+    	unsavedChanges = true;
+    	changeWindowTitle(unsavedChanges);
     }
 
     void clearSelection() {
@@ -5350,6 +5714,12 @@
     		return true;
     	if (aboutBox !=null && aboutBox.isShowing())
     		return true;
+    	if (helpDialog !=null && helpDialog.isShowing())
+    		return true;
+    	if (licenseDialog !=null && licenseDialog.isShowing())
+    		return true;
+    	if (modDialog !=null && modDialog.isShowing())
+    		return true;
     	return false;
     }
     
@@ -5461,14 +5831,12 @@
 				menuPerformed("key", "print");
 				e.cancel();
 			}
-    			if (code==KEY_N && isElectron()) {
+    			if (code==KEY_N) {
 				menuPerformed("key", "newwindow");
 				e.cancel();
 			}
     			if (code==KEY_S) {
-    			    	String cmd = "exportaslocalfile";
-    			    	if (isElectron())
-    			    	    cmd = saveFileItem.isEnabled() ? "save" : "saveas";
+				String cmd = (filePath!=null) ? "save" : "saveas";
 				menuPerformed("key", cmd);
 				e.cancel();
 			}
@@ -5627,6 +5995,13 @@
     	// reloading the same file doesn't create a change event so importing the same file twice
     	// doesn't work unless you destroy the original input element and replace it with a new one
     	int idx=verticalPanel.getWidgetIndex(loadFileInput);
+    	filePath = loadFileInput.getPath();
+    	console("filePath: " + filePath);
+    	fileName = loadFileInput.getFileName();
+    	console("fileName: " + fileName);
+    	if (filePath!=null)
+    		allowSave(true);
+    	changeWindowTitle(false);
     	LoadFile newlf=new LoadFile(this);
     	verticalPanel.insert(newlf, idx);
     	verticalPanel.remove(idx+1);
@@ -5637,16 +6012,13 @@
     	if (iFrame!=null) {
     		int i=verticalPanel.getWidgetIndex(iFrame);
     		verticalPanel.insert(w, i);
-    		setiFrameHeight();
     	}
     	else
-    		verticalPanel.add(w);
+    		verticalPanel2.add(w);
     }
     
     void removeWidgetFromVerticalPanel(Widget w){
-    	verticalPanel.remove(w);
-    	if (iFrame!=null)
-    		setiFrameHeight();
+    	verticalPanel2.remove(w);
     }
     
     public static CircuitElm createCe(int tint, int x1, int y1, int x2, int y2, int f, StringTokenizer st) {
@@ -6131,13 +6503,14 @@
     }
     
 	native void printCanvas(CanvasElement cv) /*-{
-	    var img    = cv.toDataURL("image/png");
-	    var win = window.open("", "print", "height=500,width=500,status=yes,location=no");
-	    win.document.title = "Print Circuit";
-	    win.document.open();
-	    win.document.write('<img src="'+img+'"/>');
-	    win.document.close();
-	    setTimeout(function(){win.print();},1000);
+		var img    = cv.toDataURL("image/png");
+		var iframe = $doc.createElement("iframe");
+		iframe.src = img;
+		iframe.style = "display:none";
+		$doc.body.appendChild(iframe);
+		var contentWindow = iframe.contentWindow;
+		contentWindow.print();
+		contentWindow.addEventListener('afterprint', function(){iframe.remove()});
 	}-*/;
 
 	void doDCAnalysis() {
@@ -6488,7 +6861,9 @@
 	        getElements: $entry(function() { return that.@com.lushprojects.circuitjs1.client.CirSim::getJSElements()(); } ),
 	        getCircuitAsSVG: $entry(function() { return that.@com.lushprojects.circuitjs1.client.CirSim::doExportAsSVGFromAPI()(); } ),
 	        exportCircuit: $entry(function() { return that.@com.lushprojects.circuitjs1.client.CirSim::dumpCircuit()(); } ),
-	        importCircuit: $entry(function(circuit, subcircuitsOnly) { return that.@com.lushprojects.circuitjs1.client.CirSim::importCircuitFromText(Ljava/lang/String;Z)(circuit, subcircuitsOnly); })
+	        importCircuit: $entry(function(circuit, subcircuitsOnly) { return that.@com.lushprojects.circuitjs1.client.CirSim::importCircuitFromText(Ljava/lang/String;Z)(circuit, subcircuitsOnly); }),
+			redrawCanvasSize: $entry(function() { return that.@com.lushprojects.circuitjs1.client.CirSim::redrawCanvasSize()(); } ),
+			allowSave: $entry(function(b) { return that.@com.lushprojects.circuitjs1.client.CirSim::allowSave(Z)(b);})
 	    };
 	    var hook = $wnd.oncircuitjsloaded;
 	    if (hook)
